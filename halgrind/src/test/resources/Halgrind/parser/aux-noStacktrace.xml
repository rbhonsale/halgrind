<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: ./program1</line>
</preamble>

<pid>10418</pid>
<ppid>10270</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--suppressions=/usr/lib/valgrind/debian-libc6-dbg.supp</arg>
    <arg>--tool=memcheck</arg>
    <arg>--track-origins=yes</arg>
    <arg>--leak-check=full</arg>
    <arg>--xml=yes</arg>
    <arg>--xml-file=track-origins_yes.xml</arg>
  </vargv>
  <argv>
    <exe>./program1</exe>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.097 </time>
</status>

<error>
  <unique>0x2</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x4EBAD23</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt;(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, long) const</fn>
    </frame>
    <frame>
      <ip>0x4EBB065</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, long) const</fn>
    </frame>
    <frame>
      <ip>0x4EC64DC</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::ostream&amp; std::ostream::_M_insert&lt;long&gt;(long)</fn>
    </frame>
    <frame>
      <ip>0x400942</ip>
      <obj>/home/jenkins/test-slave/workspace/valgrind-test/program1</obj>
      <fn>main</fn>
      <dir>/home/jenkins/test-slave/workspace/valgrind-test</dir>
      <file>main.cpp</file>
      <line>24</line>
    </frame>
  </stack>
  <auxwhat>Uninitialised value was created by a stack allocation</auxwhat>
  <stack>
    <frame>
      <ip>0x40087E</ip>
      <obj>/home/jenkins/test-slave/workspace/valgrind-test/program1</obj>
      <fn>invalidread(int)</fn>
      <dir>/home/jenkins/test-slave/workspace/valgrind-test</dir>
      <file>main.cpp</file>
      <line>10</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x7</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x4EBAD77</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt;(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, long) const</fn>
    </frame>
    <frame>
      <ip>0x4EBB065</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, long) const</fn>
    </frame>
    <frame>
      <ip>0x4EC64DC</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::ostream&amp; std::ostream::_M_insert&lt;long&gt;(long)</fn>
    </frame>
    <frame>
      <ip>0x400942</ip>
      <obj>/home/jenkins/test-slave/workspace/valgrind-test/program1</obj>
      <fn>main</fn>
      <dir>/home/jenkins/test-slave/workspace/valgrind-test</dir>
      <file>main.cpp</file>
      <line>24</line>
    </frame>
  </stack>
  <auxwhat>Foobar</auxwhat>
  <auxwhat>Uninitialised value was created by a stack allocation</auxwhat>
  <stack>
    <frame>
      <ip>0x40087E</ip>
      <obj>/home/jenkins/test-slave/workspace/valgrind-test/program1</obj>
      <fn>invalidread(int)</fn>
      <dir>/home/jenkins/test-slave/workspace/valgrind-test</dir>
      <file>main.cpp</file>
      <line>10</line>
    </frame>
  </stack>
</error>


<status>
  <state>FINISHED</state>
  <time>00:00:00:00.827 </time>
</status>

<error>
  <unique>0x8</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are definitely lost in loss record 1 of 1</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x4C2B1C7</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x400871</ip>
      <obj>/home/jenkins/test-slave/workspace/valgrind-test/program1</obj>
      <fn>leak()</fn>
      <dir>/home/jenkins/test-slave/workspace/valgrind-test</dir>
      <file>main.cpp</file>
      <line>6</line>
    </frame>
    <frame>
      <ip>0x40091D</ip>
      <obj>/home/jenkins/test-slave/workspace/valgrind-test/program1</obj>
      <fn>main</fn>
      <dir>/home/jenkins/test-slave/workspace/valgrind-test</dir>
      <file>main.cpp</file>
      <line>22</line>
    </frame>
  </stack>
</error>

<errorcounts>
  <pair>
    <count>1</count>
    <unique>0x7</unique>
  </pair>
  <pair>
    <count>2</count>
    <unique>0x4</unique>
  </pair>
  <pair>
    <count>2</count>
    <unique>0x3</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x2</unique>
  </pair>
</errorcounts>

<suppcounts>
  <pair>
    <count>2</count>
    <name>dl-hack3-cond-1</name>
  </pair>
</suppcounts>

</valgrindoutput>

