<j:jelly xmlns:j="jelly:core" 
         xmlns:st="jelly:stapler" 
         xmlns:d="jelly:define"
         xmlns:l="/lib/layout" 
         xmlns:t="/lib/hudson" 
         xmlns:f="/lib/form"
         xmlns:i="jelly:fmt"  
         xmlns:local="local">
         
    <st:header name="Content-Type" value="text/html;charset=UTF-8"/>
    
    <j:set var="errorList" value="${process.errorList.uninitializedValueErrors}"/>
    <j:set var="errorListName" value="Uninitialized Value"/>
    <j:set var="errorListDesc" value="An uninitialised-value use error is reported when your program uses a value which hasn't been initialised -- in other words, is undefined."/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.uninitvals"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/>
	
    <j:set var="errorList" value="${process.errorList.uninitializedConditionErrors}"/>
    <j:set var="errorListName" value="Uninitialized Condition"/>
    <j:set var="errorListDesc" value="An uninitialised-condition use error is reported when a condition depends on uninitialised values."/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.value"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/>	

    <j:set var="errorList" value="${process.errorList.invalidWriteErrors}"/>
    <j:set var="errorListName" value="Invalid Writes"/>
    <j:set var="errorListDesc" value="This happens when your program writes memory at a place which Memcheck reckons it shouldn't. "/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.badrw"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/>
	
    <j:set var="errorList" value="${process.errorList.invalidReadErrors}"/>
    <j:set var="errorListName" value="Invalid Reads"/>
    <j:set var="errorListDesc" value="This happens when your program read memory at a place which Memcheck reckons it shouldn't. "/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.badrw"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/>   
	
    <j:set var="errorList" value="${process.errorList.overlapErrors}"/>
    <j:set var="errorListName" value="Overlaps"/>
    <j:set var="errorListDesc" value="If copying takes place between objects that overlap, the behavior is undefined. "/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.overlap"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/>   

    <j:set var="errorList" value="${process.errorList.syscallParamErrors}"/>
    <j:set var="errorListName" value="Use of uninitialised or unaddressable values in system calls"/>
    <j:set var="errorListDesc" value="Use of uninitialised or unaddressable values in system calls."/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.bad-syscall-args"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/> 
  
    <j:set var="errorList" value="${process.errorList.invalidFreeErrors}"/>
    <j:set var="errorListName" value="Illegal frees"/>
    <j:set var="errorListDesc" value="Memcheck keeps track of the blocks allocated by your program with malloc/new, so it can know exactly whether or not the argument to free/delete is legitimate or not."/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.rudefn"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/> 
	
    <j:set var="errorList" value="${process.errorList.mismatchedFreeErrors}"/>
    <j:set var="errorListName" value="Mismatched frees"/>
    <j:set var="errorListDesc" value="Memcheck keeps track of the blocks allocated by your program with malloc/new, so it can know exactly whether or not the argument to free/delete is legitimate or not."/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.rudefn"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/> 
   
    <j:set var="errorList" value="${process.errorList.leakPossiblyLostErrors}"/>
    <j:set var="errorListName" value="Memory Leaks (possibly lost)"/>
    <j:set var="errorListDesc" value="This means that no pointer to the block of memory can be found. The block is classified as 'lost', because the programmer could not possibly have freed it at program exit, since no pointer to it exists."/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.leaks"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/> 
			   
    <j:set var="errorList" value="${process.errorList.leakDefinitelyLostErrors}"/>
    <j:set var="errorListName" value="Memory Leaks (definitely lost)"/>
    <j:set var="errorListDesc" value="This means that a chain of one or more pointers to the block of memory has been found, but at least one of the pointers is an interior-pointer. This could just be a random value in memory that happens to point into the block."/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.leaks"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/>
		   
    <j:set var="errorList" value="${process.errorList.leakIndirectlyLostErrors}"/>
    <j:set var="errorListName" value="Memory Leaks (indirectly lost)"/>
    <j:set var="errorListDesc" value="This means that the block is lost, not because there are no pointers to it, but rather because all the blocks that point to it are themselves lost."/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.leaks"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/>
		
    <j:set var="errorList" value="${process.errorList.leakStillReachableErrors}"/>
    <j:set var="errorListName" value="Memory Leaks (still reachable)"/>
    <j:set var="errorListDesc" value="A start-pointer or chain of start-pointers to the block is found. Since the block is still pointed at, the programmer could, at least in principle, have freed it before program exit."/>
    <j:set var="manualLink" value="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.leaks"/>
    <j:set var="isLeak" value="false"/>
	<st:include page="/org/jenkinsci/plugins/valgrind/ValgrindResult/typederrorlist.jelly"/>
    
</j:jelly>